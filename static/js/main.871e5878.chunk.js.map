{"version":3,"sources":["bis-api.js","bis.js","App.js","index.js"],"names":["KEYBLOB_KEY_SRC","Uint8Array","CONSOLE_KEY_SRC","RETAIL_AES_KEK_SRC","AES_KEK_SRC","AES_KEY_SRC","BIS_KEK_SRC","BIS_KEY_SRC_0","BIS_KEY_SRC_1","BIS_KEY_SRC_2","bytesToHexString","input","Array","from","byte","toString","slice","join","toUpperCase","hexStringToBytes","Buffer","formatKeys","key","sect","res","crypt","substring","tweak","push","decrypt","data","RijndaelBlock","deriveBisKeys","sbk","tsec","devKF1","devKF2","devKey","s00Kek","s00Key","ossKF1","ossKF2","ossKey","s01Key","s02Key","concat","BisKeyGen","props","state","results","bsCustomFileInput","init","fc","document","getElementById","files","issues","size","length","this","showResults","Promise","all","arrayBuffer","then","sbkKey","tsecKey","validChars","value","split","every","x","includes","arr","setState","className","Tabs","defaultActiveKey","Tab","eventKey","title","Form","File","id","label","custom","Button","variant","onClick","deriveFromFile","Control","placeholder","deriveFromKeys","as","rows","readOnly","React","Component","App","ReactDOM","render","StrictMode"],"mappings":"0GAAA,mEAIMA,EAAkB,IAAIC,WAAW,CAAE,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,MAC7HC,EAAkB,IAAID,WAAW,CAAE,GAAM,EAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,MAC7HE,EAAqB,IAAIF,WAAW,CAAE,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,MAChIG,EAAc,IAAIH,WAAW,CAAE,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,MACzHI,EAAc,IAAIJ,WAAW,CAAE,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,MACzHK,EAAc,IAAIL,WAAW,CAAE,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,KACzHM,EAAgB,IAAIN,WAAW,CAAE,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAC3NO,EAAgB,IAAIP,WAAW,CAAE,GAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,MAC3NQ,EAAgB,IAAIR,WAAW,CAAE,GAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,MAEjO,SAASS,EAAiBC,GACtB,OAAOC,MAAMC,KAAKF,GAAO,SAACG,GACtB,OAAQ,KAAc,IAAPA,GAAaC,SAAS,KAAKC,OAAO,MAClDC,KAAK,IAAIC,cAGhB,SAASC,EAAiBR,GACtB,OAAOS,EAAOP,KAAKF,EAAO,OAG9B,SAASU,EAAWC,EAAKC,GACrB,IAAIC,EAAM,GACNC,EAAQf,EAAiBY,GAAKI,UAAU,EAAG,IAC3CC,EAAQjB,EAAiBY,GAAKI,UAAU,IAK5C,OAHAF,EAAII,KAAJ,kBAAoBL,EAApB,qBAAqCE,IACrCD,EAAII,KAAJ,kBAAoBL,EAApB,qBAAqCI,IAE9BH,EAGX,SAASK,EAAQC,EAAMR,GAEnB,OADe,IAAIS,IAAcT,EAAK,OACxBO,QAAQC,EAAM,KAGjB,SAASE,EAAcC,EAAKC,GACvC,IAAIV,EAAM,GAGS,kBAARS,IAAkBA,EAAMd,EAAiBc,IAChC,kBAATC,IAAmBA,EAAOf,EAAiBe,IAEtD,IAAMC,EAASN,EAAQ7B,EAAiBkC,GAClCE,EAASP,EAAQM,EAAQF,GACzBI,EAASR,EAAQ3B,EAAiBkC,GAClCE,EAAST,EAAQ1B,EAAoBkC,GACrCE,EAASV,EAAQtB,EAAe+B,GAChCE,EAASX,EAAQzB,EAAaiC,GAC9BI,EAASZ,EAAQvB,EAAakC,GAC9BE,EAASb,EAAQxB,EAAaoC,GAC9BE,EAASd,EAAQrB,EAAekC,GAChCE,EAASf,EAAQpB,EAAeiC,GAStC,OAPAlB,EAAII,KAAK,YAAclB,EAAiBuB,IACxCT,EAAII,KAAK,aAAelB,EAAiBwB,IAIzCV,GADAA,GADAA,GADAA,EAAMA,EAAIqB,OAAOxB,EAAWkB,EAAQ,KAC1BM,OAAOxB,EAAWsB,EAAQ,KAC1BE,OAAOxB,EAAWuB,EAAQ,KAC1BC,OAAOxB,EAAWuB,EAAQ,O,6PC1DnBE,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,QAAS,IAJE,E,qDAQnB,WACIC,IAAkBC,S,4BAGtB,WAAkB,IAAD,OACTC,EAAKC,SAASC,eAAe,oBAAoBC,MAAM,GACvDrB,EAAOmB,SAASC,eAAe,kBAAkBC,MAAM,GACvDC,EAAS,GAETJ,GAAMlB,IACU,MAAZkB,EAAGK,MAAcD,EAAO5B,KAAK,qDACf,KAAdM,EAAKuB,MAAaD,EAAO5B,KAAK,mDAE9B4B,EAAOE,OAAS,EAChBC,KAAKC,YAAYJ,GAEjBK,QAAQC,IAAI,CAACV,EAAGW,cAAe7B,EAAK6B,gBAAgBC,MAAK,SAACf,GACtD,IAAIzB,EACA4B,EAAK,IAAInD,WAAWgD,EAAQ,IAC5Bf,EAAO,IAAIjC,WAAWgD,EAAQ,IAMlC,GAJiB,MAAbG,EAAG,KACHI,EAAO5B,KAAK,sCAGZ4B,EAAOE,OAAS,EAChB,EAAKE,YAAYJ,OACd,CACH,IAAIS,EAASb,EAAGpC,MAAM,IAAM,KACxBkD,EAAUhC,EAAKlB,MAAM,EAAK,IAC9BQ,EAAMQ,YAAciC,EAAQC,GAC5B,EAAKN,YAAYpC,U,4BAQrC,WACI,IAAM2C,EAAa,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzH3C,EAAM,GACNS,EAAMoB,SAASC,eAAe,WAAWc,MACzClC,EAAOmB,SAASC,eAAe,YAAYc,MAE5B,KAAfnC,EAAIyB,QAAelC,EAAII,KAAK,gCACZ,KAAhBM,EAAKwB,QAAelC,EAAII,KAAK,iCACjCK,EAAIoC,MAAM,IAAIC,OAAM,SAACC,GAEjB,OADKJ,EAAWK,SAASD,IAAI/C,EAAII,KAAK,wCAC/BuC,EAAWK,SAASD,MAE/BrC,EAAKmC,MAAM,IAAIC,OAAM,SAACC,GAElB,OADKJ,EAAWK,SAASD,IAAI/C,EAAII,KAAK,yCAC/BuC,EAAWK,SAASD,MAG3B/C,EAAIkC,OAAS,IAGblC,EAAMQ,YAAcC,EAAKC,IAFzByB,KAAKC,YAAYpC,K,yBAOzB,SAAYiD,GACRd,KAAKe,SAAS,CAACzB,QAASwB,M,oBAG5B,WAAU,IAAD,OACCxB,EAAUU,KAAKX,MAAMC,QAAQhC,KAAK,MAExC,OACI,gCACI,sBAAK0D,UAAU,SAAf,UACI,oBAAIA,UAAU,cAAd,gCAGA,mFACA,0HACA,sKAGJ,sBAAKA,UAAU,UAAf,UACI,eAACC,EAAA,EAAD,CAAMC,iBAAiB,YAAvB,UACI,eAACC,EAAA,EAAD,CAAKC,SAAS,YAAYC,MAAM,eAAhC,UACI,eAACC,EAAA,EAAD,WACI,+DACA,cAACA,EAAA,EAAKC,KAAN,CAAWC,GAAG,mBAAmBC,MAAM,mBAAmBC,QAAM,IAEhE,6DACA,cAACJ,EAAA,EAAKC,KAAN,CAAWC,GAAG,iBAAiBC,MAAM,mBAAmBC,QAAM,OAElE,uBACA,cAACC,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAAS,WAAO,EAAKC,kBAAmBd,UAAU,WAA3E,2CAEJ,eAACG,EAAA,EAAD,CAAKC,SAAS,WAAWC,MAAM,aAA/B,UACI,eAACC,EAAA,EAAD,WACI,+CACA,cAACA,EAAA,EAAKS,QAAN,CAAcP,GAAG,UAAUQ,YAAY,qCAEvC,gDACA,cAACV,EAAA,EAAKS,QAAN,CAAcP,GAAG,WAAWQ,YAAY,wCAE5C,uBACA,cAACL,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAAS,WAAO,EAAKI,kBAAmBjB,UAAU,WAA3E,sDAIR,cAACM,EAAA,EAAKS,QAAN,CAAcG,GAAG,WAAWC,KAAM,GAAIC,UAAQ,EAAC3B,MAAOnB,c,GArHnC+C,IAAMC,WCM9BC,MARf,WACE,OACE,qBAAKvB,UAAU,MAAf,SACE,cAAC,EAAD,OCDNwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhD,SAASC,eAAe,W","file":"static/js/main.871e5878.chunk.js","sourcesContent":["// This code is based on a C# implementation by SimonTime.\n\nimport RijndaelBlock from \"rijndael-js\";\n\nconst KEYBLOB_KEY_SRC = new Uint8Array([ 0xDF, 0x20, 0x6F, 0x59, 0x44, 0x54, 0xEF, 0xDC, 0x70, 0x74, 0x48, 0x3B, 0x0D, 0xED, 0x9F, 0xD3 ]);\nconst CONSOLE_KEY_SRC = new Uint8Array([ 0x4F, 0x02, 0x5F, 0x0E, 0xB6, 0x6D, 0x11, 0x0E, 0xDC, 0x32, 0x7D, 0x41, 0x86, 0xC2, 0xF4, 0x78 ]);\nconst RETAIL_AES_KEK_SRC = new Uint8Array([ 0xE2, 0xD6, 0xB8, 0x7A, 0x11, 0x9C, 0xB8, 0x80, 0xE8, 0x22, 0x88, 0x8A, 0x46, 0xFB, 0xA1, 0x95 ]);\nconst AES_KEK_SRC = new Uint8Array([ 0x4D, 0x87, 0x09, 0x86, 0xC4, 0x5D, 0x20, 0x72, 0x2F, 0xBA, 0x10, 0x53, 0xDA, 0x92, 0xE8, 0xA9 ]);\nconst AES_KEY_SRC = new Uint8Array([ 0x89, 0x61, 0x5E, 0xE0, 0x5C, 0x31, 0xB6, 0x80, 0x5F, 0xE5, 0x8F, 0x3D, 0xA2, 0x4F, 0x7A, 0xA8 ]);\nconst BIS_KEK_SRC = new Uint8Array([ 0x34, 0xC1, 0xA0, 0xC4, 0x82, 0x58, 0xF8, 0xB4, 0xFA, 0x9E, 0x5E, 0x6A, 0xDA, 0xFC, 0x7E, 0x4F ]);\nconst BIS_KEY_SRC_0 = new Uint8Array([ 0xF8, 0x3F, 0x38, 0x6E, 0x2C, 0xD2, 0xCA, 0x32, 0xA8, 0x9A, 0xB9, 0xAA, 0x29, 0xBF, 0xC7, 0x48, 0x7D, 0x92, 0xB0, 0x3A, 0xA8, 0xBF, 0xDE, 0xE1, 0xA7, 0x4C, 0x3B, 0x6E, 0x35, 0xCB, 0x71, 0x06 ]);\nconst BIS_KEY_SRC_1 = new Uint8Array([ 0x41, 0x00, 0x30, 0x49, 0xDD, 0xCC, 0xC0, 0x65, 0x64, 0x7A, 0x7E, 0xB4, 0x1E, 0xED, 0x9C, 0x5F, 0x44, 0x42, 0x4E, 0xDA, 0xB4, 0x9D, 0xFC, 0xD9, 0x87, 0x77, 0x24, 0x9A, 0xDC, 0x9F, 0x7C, 0xA4 ]);\nconst BIS_KEY_SRC_2 = new Uint8Array([ 0x52, 0xC2, 0xE9, 0xEB, 0x09, 0xE3, 0xEE, 0x29, 0x32, 0xA1, 0x0C, 0x1F, 0xB6, 0xA0, 0x92, 0x6C, 0x4D, 0x12, 0xE1, 0x4B, 0x2A, 0x47, 0x4C, 0x1C, 0x09, 0xCB, 0x03, 0x59, 0xF0, 0x15, 0xF4, 0xE4 ]);\n        \nfunction bytesToHexString(input) {\n    return Array.from(input, (byte) => {\n        return ('0' + (byte & 0xFF).toString(16)).slice(-2);\n    }).join('').toUpperCase();\n}\n\nfunction hexStringToBytes(input) { \n    return Buffer.from(input, 'hex');\n}\n\nfunction formatKeys(key, sect) {\n    let res = [];\n    let crypt = bytesToHexString(key).substring(0, 32);\n    let tweak = bytesToHexString(key).substring(32);\n    \n    res.push(`BIS Key ${sect} (Crypt): ${crypt}`);\n    res.push(`BIS Key ${sect} (Tweak): ${tweak}`);\n\n    return res;\n}\n\nfunction decrypt(data, key) { \n    const cipher = new RijndaelBlock(key, 'ecb');\n    return cipher.decrypt(data, 128);\n}\n\nexport default function deriveBisKeys(sbk, tsec) {\n    let res = [];\n\n    //convert hex strings to bytes\n    if (typeof sbk === \"string\") sbk = hexStringToBytes(sbk);\n    if (typeof tsec === \"string\") tsec = hexStringToBytes(tsec);\n\n    const devKF1 = decrypt(KEYBLOB_KEY_SRC, tsec);\n    const devKF2 = decrypt(devKF1, sbk);\n    const devKey = decrypt(CONSOLE_KEY_SRC, devKF2);\n    const s00Kek = decrypt(RETAIL_AES_KEK_SRC, devKey);\n    const s00Key = decrypt(BIS_KEY_SRC_0, s00Kek);\n    const ossKF1 = decrypt(AES_KEK_SRC, devKey);\n    const ossKF2 = decrypt(BIS_KEK_SRC, ossKF1);\n    const ossKey = decrypt(AES_KEY_SRC, ossKF2);\n    const s01Key = decrypt(BIS_KEY_SRC_1, ossKey);\n    const s02Key = decrypt(BIS_KEY_SRC_2, ossKey);\n    \n    res.push(\"SBK Key: \" + bytesToHexString(sbk));\n    res.push(\"TSEC Key: \" + bytesToHexString(tsec));\n    res = res.concat(formatKeys(s00Key, 0));\n    res = res.concat(formatKeys(s01Key, 1));\n    res = res.concat(formatKeys(s02Key, 2));\n    res = res.concat(formatKeys(s02Key, 3));\n    \n    return res;\n    \n}","import React from 'react';\nimport bsCustomFileInput from 'bs-custom-file-input';\nimport { Form, Tabs, Tab, Button } from 'react-bootstrap';\nimport deriveBisKeys from './bis-api'; \n\nexport default class BisKeyGen extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            results: []\n        }\n    }\n\n    componentDidMount() {\n        bsCustomFileInput.init();\n    }\n\n    deriveFromFile() {\n        let fc = document.getElementById('file-fuse-cached').files[0];\n        let tsec = document.getElementById('file-tsec-keys').files[0];\n        let issues = [];\n\n        if (fc && tsec) {\n            if (fc.size !== 768) issues.push(\"Uploaded fuse_cached.bin is not the correct size.\");\n            if (tsec.size !== 32) issues.push(\"Uploaded tsec_keys.bin is not the correct size.\");\n\n            if (issues.length > 0) {\n                this.showResults(issues);\n            } else {\n                Promise.all([fc.arrayBuffer(), tsec.arrayBuffer()]).then((results) => {\n                    let res;\n                    let fc = new Uint8Array(results[0]);\n                    let tsec = new Uint8Array(results[1]);\n    \n                    if (fc[0x10] !== 0x83) {\n                        issues.push(\"Your fuse_cached.bin is not valid.\");\n                    }\n        \n                    if (issues.length > 0) {\n                        this.showResults(issues);\n                    } else {\n                        let sbkKey = fc.slice(0xA4, 0xA4 + 0x10);\n                        let tsecKey = tsec.slice(0x0, 0x10);\n                        res = deriveBisKeys(sbkKey, tsecKey);\n                        this.showResults(res);\n                    }\n                });\n            }\n        }\n\n    }\n\n    deriveFromKeys() {\n        const validChars = ['a', 'b', 'c', 'd', 'e', 'f', 'A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n        let res = [];\n        let sbk = document.getElementById('key-sbk').value;\n        let tsec = document.getElementById('key-tsec').value;\n\n        if (sbk.length !== 32) res.push(\"SBK key length is not valid.\");\n        if (tsec.length !== 32) res.push(\"TSEC key length is not valid.\");\n        sbk.split('').every((x) => {\n            if (!validChars.includes(x)) res.push(\"SBK key contains invalid characters.\");\n            return validChars.includes(x);\n        });\n        tsec.split('').every((x) => {\n            if (!validChars.includes(x)) res.push(\"TSEC key contains invalid characters.\");\n            return validChars.includes(x);\n        });\n\n        if (res.length > 0) {\n            this.showResults(res);\n        } else {\n            res = deriveBisKeys(sbk, tsec);\n            this.showResults(res);\n        }\n    }    \n\n    showResults(arr) {\n        this.setState({results: arr});\n    }\n\n    render() {\n        const results = this.state.results.join('\\n');\n\n        return (\n            <div>\n                <div className=\"center\">\n                    <h1 className=\"tall-margin\">\n                        BIS Key Calculator\n                    </h1>\n                    <div>Key deriver based on an implementation by Simon.</div>\n                    <div>All operations are performed within your browser. No key data is ever sent to a server.</div>\n                    <div>You can calculate your BIS keys below by either uploading a couple Hekate dumps, or by entering your SBK and TSEC keys manually.</div>\n                </div>\n\n                <div className=\"bis-box\">\n                    <Tabs defaultActiveKey=\"bis-files\">\n                        <Tab eventKey=\"bis-files\" title=\"Upload Dumps\">\n                            <Form>\n                                <h6>Upload Hekate fuse_cached.bin</h6>\n                                <Form.File id=\"file-fuse-cached\" label=\"No file selected\" custom />\n\n                                <h6>Upload Hekate tsec_keys.bin</h6>\n                                <Form.File id=\"file-tsec-keys\" label=\"No file selected\" custom />\n                            </Form>\n                            <br/>\n                            <Button variant=\"danger\" onClick={() => {this.deriveFromFile()}} className=\"btn-wide\">Derive BIS keys from files</Button>\n                        </Tab>\n                        <Tab eventKey=\"bis-text\" title=\"Enter Keys\">\n                            <Form>\n                                <h6>Enter SBK Key</h6>\n                                <Form.Control id=\"key-sbk\" placeholder=\"00000000000000000000000000000000\"  />\n\n                                <h6>Enter TSEC Key</h6>\n                                <Form.Control id=\"key-tsec\" placeholder=\"00000000000000000000000000000000\" />\n                            </Form>\n                            <br/>\n                            <Button variant=\"danger\" onClick={() => {this.deriveFromKeys()}} className=\"btn-wide\">Derive BIS keys from SBK/TSEC keys</Button>\n                        </Tab>\n                    </Tabs>\n                    \n                    <Form.Control as=\"textarea\" rows={10} readOnly value={results} />\n\n                </div>\n            </div>\n        );\n    }\n}","import './App.css';\nimport BIS from './bis.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BIS/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}